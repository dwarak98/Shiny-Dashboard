menuItem("Widgets", tabName = "widgets", icon = icon("th")),
menuItem("Visualization", tabName = "Visualization", icon = icon("th")),
menuItem("Prediction", tabName = "Prediction", icon = icon("th"))
)),
dashboardBody(# Boxes need to be put in a row (or column)
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(
width = 3,
dateRangeInput(
"date",
"Date range:",
start = Sys.Date() - 1,
end   = Sys.Date() + 1
),
sliderInput(
"slider_input",
label = "Hour",
value = c(0, 23),
min = 0,
max = 23
),
selectInput(
"select_input",
label = "Category",
choices = unique(as.character(df$variable)),
selected = c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"),
multiple = TRUE
),
),
box(width = 9, plotlyOutput(outputId = "line", height =
400))
),
fluidRow(box(
width = 12, plotlyOutput(outputId = "bar", height = 800)
))),
# Second tab content
tabItem(
tabName = "widgets",
fileInput(
'file1',
'Choose CSV File',
accept = c('text/csv', 'text/comma-separated-values,text/plain', '.csv')
),
numericInput(
"n",
"Rows",
value = 5,
min = 1,
step = 1
),
tableOutput("head")
),
# 3rd tab
tabItem(tabName = "Visualization",
fluidRow(
box(
width = 3,
selectInput(
"charttype",
"Plot Type",
choices = c("Line", "Bar", "Table"),
multiple = FALSE
),
uiOutput("lineplotVar1"),
uiOutput("lineplotVar2"),
uiOutput("lineplotVar3"),
uiOutput("tablecol1"),
uiOutput("tablecol2"),
uiOutput("tablecol3")
),
box(width = 9, uiOutput("LinePlot"), uiOutput("tableplot"), )
)),
# 4th tab
tabItem(tabName = "Prediction",
fluidRow(
box(
width = 3,
selectInput(
"algo",
"Algorithm",
choices = c("ARIMA", "Linear Regression"),
multiple = FALSE
),
uiOutput("P"),
uiOutput("Q"),
uiOutput("D"),
uiOutput("y_variable"),
uiOutput("x"),
),
box(width = 9, uiOutput("table1plot"), )
))
))
)
server <- function(input, output, session) {
########### RT Update of SPP operational Data ####################
sourceData <- reactive({
invalidateLater(60000, session)
# functionThatGetsData()
get_data()
})
gensourceData <- reactive({
invalidateLater(60000, session)
# functionThatGetsData()
get_gen_data()
})
VER_data_r1 <- reactive({
dplyr::filter(
sourceData(),
between(as_date(df$Interval), input$date[1], input$date[2]) &
df$variable %in% input$select_input
)
})
VER_data_r2 <- reactive({
dplyr::filter(VER_data_r1(),
between(Hour, input$slider_input[1], input$slider_input[2]))
})
############# Static Line Chart #################################
output$line <- renderPlotly({
p1 <-
ggplot(VER_data_r2(),
aes(
x = Interval,
y = value,
col = variable,
text = paste(
"</br>Date: ",
Interval,
"</br>Value: ",
value,
"</br>Category: ",
variable
)
)) + geom_point() + geom_line() + theme_minimal() + labs(y = "Wind Penetration (%)", x = "Datetime", col = "Category")
ggplotly(p1, tooltip = c("text"))
})
############# Static Bar Chart #################################
output$bar <- renderPlotly({
p1 <-
ggplot(gensourceData(),
aes(
x = variable,
y = value,
fill = variable,
text = paste("</br>Resource: ", variable, "</br>Energy (MWh): ", value)
)) +
geom_bar(position = "dodge", stat = "identity")
p2 <-
p1 + theme_classic() + labs(y = "Energy (MWh)", x = "Resources", fill = "Resources") +
theme_minimal()
ggplotly(p2, tooltip = c("text"))
})
################ Visualization #########################
############ Read the imported csv file ######################
data <- reactive({
req(input$file1)
inFile <- input$file1
print(inFile$datapath)
read.csv(inFile$datapath, header = TRUE)
})
########## Displays top 5 rows of the imported csv #############
output$head <- renderTable({
head(data(), input$n)
})
########### Display Line Plot #################
data1 <- reactive({
req(input$file1)
inFile <- input$file1
print(inFile$datapath)
read.csv(inFile$datapath, header = TRUE)
})
output$lineplotVar1 <- renderUI({
if (input$charttype == "Line")
{
choices <- unique(colnames(data()))
selectInput("xaxis",
"X_Axis",
choices = choices,
multiple = TRUE)
}
})
output$lineplotVar2 <- renderUI({
if (input$charttype == "Line")
{
choices <- unique(colnames(data()))
selectInput("yaxis",
"Y_Axis",
choices = choices,
multiple = TRUE)
}
})
output$lineplotVar3 <- renderUI({
if (input$charttype == "Line")
{
choices <- unique(colnames(data()))
selectInput("category",
"Category",
choices = choices,
multiple = TRUE)
}
})
output$LinePlot <- renderUI({
if (input$charttype == "Line")
{
plotlyOutput(outputId = "dline", height = 400)
}
})
output$dline <- renderPlotly({
{
data2 <- data1()
print(data2)
data2 <- data2 %>% rename(
col1 = input$xaxis,
col2 = input$yaxis,
category = input$category
)
p1 <-
ggplot(data2, aes(
x = col1,
y = col2,
fill = category,
text = paste(
"</br>X-axis: ",
col1,
"</br>Y-Axis: ",
col2,
"</br>Category: ",
category
)
)) + geom_col() + theme_minimal() + labs(y = input$yaxis,
x = input$xaxis,
col = input$category)
ggplotly(p1, tooltip = c("text"))
}
})
####################### Table Display ###################
output$tablecol1 <- renderUI({
if (input$charttype == "Table")
{
choices <- unique(colnames(data()))
selectInput("VALUE",
"ENTER THE AMOUNT OR VALUE",
choices = choices,
multiple = TRUE)
}
})
output$tablecol2 <- renderUI({
if (input$charttype == "Table")
{
choices <- unique(colnames(data()))
selectInput("Row",
"List of Row",
choices = choices,
multiple = TRUE)
}
})
output$tablecol3 <- renderUI({
if (input$charttype == "Table")
{
choices <- unique(colnames(data()))
selectInput("Column",
"List of Columns",
choices = choices,
multiple = TRUE)
}
})
output$tableplot <- renderUI({
if (input$charttype == "Table")
{
DT::dataTableOutput(outputId = "table")
}
})
new_data <- reactive({
print(input$Column[2])
if (is.na(input$Column[2]))
{
newdata1 <- data1() %>% rename(
Col1 = input$Column[1],
Vue = input$VALUE,
Rws = input$Row
)
newdata1 %>% group_by(Col1) %>% summarise(Value = sum(as.numeric(Vue)))
# aggregate(newdata1$input$VALUE, by=list(newdata1$input$Column), FUN=sum)
}
else if (!is.na(input$Column[2]))
{
newdata1 <- data1() %>% rename(
Col1 = input$Column[1],
Col2 = input$Column[2],
Vue = input$VALUE,
Rws = input$Row
)
newdata1 %>% group_by(Col1,Col2) %>% summarise(Value = sum(as.numeric(Vue)))
# aggregate(newdata1$input$VALUE, by=list(newdata1$input$Column), FUN=sum)
}
})
output$table <- DT::renderDataTable({
new_data()
#,options = list(pageLength = 5,initComplete = I("function(settings, json) {alert('Done.');}"))
})
##################### PREDICTION #########################
output$y_variable <- renderUI({
if (input$algo == "ARIMA")
{
choices <- unique(colnames(data()))
selectInput("y_variable1",
"What to Predict",
choices = choices,
multiple = TRUE)
}
})
output$P <- renderUI({
if (input$algo == "ARIMA")
{
numericInput("P1",
h3("Auto Regressive Coeffcienct (P)"),
value = 1)
}
})
output$Q <- renderUI({
if (input$algo == "ARIMA")
{
numericInput("Q1",
h3("Moving Average Coeffcienct (P)"),
value = 1)
}
})
output$D <- renderUI({
if (input$algo == "ARIMA")
{
numericInput("D1",
h3("Differencing (D)"),
value = 1)
}
})
}
shinyApp(ui, server)
deseasonal_cnt
df
gendf
df
df.head
df.head(5)
df.head()
head(df)
auto.arima(df$value)
install.packages(c("forecast", "tseries"))
setwd("~/Shiny-Dashboard")
df <- read.csv("dalmp.csv",header = TRUE)
View(df)
df = subset(df, select = -c(X) )
View(df)
df = subset(df, select = c(OPERATION_DATE,PRICE))
View(df)
df <- aggregate(df$PRICE,by=df$OPERATION_DATE)
df <- aggregate(df$PRICE,by=df$OPERATION_DATE,FUN = mean())
df <- aggregate(x=df$PRICE,by=df$OPERATION_DATE,FUN = mean())
df <- aggregate(x=df,by=df$OPERATION_DATE,FUN = mean())
View(df)
df <- aggregate(df$PRICE,df$OPERATION_DATE,FUN = mean())
df <- aggregate(df$PRICE,df$OPERATION_DATE,FUN = mean
df <- aggregate(df$PRICE,df$OPERATION_DATE,FUN = mean)
df <- aggregate(df$PRICE,by=list(df$OPERATION_DATE),FUN = mean)
View(df)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
View(df)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(PRICE = df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
View(df)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
x <- auto.arima(df)
ARIMA <- function(df,y,p,q,d)
{
}
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
x <- auto.arima(df)
ARIMA <- function(df,y,p,q,d)
{
}
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
x <- auto.arima(df$x)
ARIMA <- function(df,y,p,q,d)
{
}
View(x)
future = forecast(x,h=5)
View(future)
future$fitted
plot(forecast(x,h=5))
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
x <- auto.arima(df$x)
plot(forecast(x,h=5))
plot(df$x)
ARIMA <- function(df,y,p,q,d)
{
}
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
x <- auto.arima(df$x)
plot(forecast(x,h=5))
ARIMA <- function(df,y,p,q,d)
{
}
plot(df$OPERATION_DATE,forecast(x,h=5))
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
x <- auto.arima(df$x)
plot(df$OPERATION_DATE,forecast(x,h=0))
ARIMA <- function(df,y,p,q,d)
{
}
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
x <- auto.arima(df$x)
plot(df$OPERATION_DATE,df$x)
ARIMA <- function(df,y,p,q,d)
{
}
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
x <- auto.arima(df$x)
plot(forecast(x,h=10))
ARIMA <- function(df,y,p,q,d)
{
}
View(future)
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
x <- auto.arima(df$x)
plot(forecast(x,h=3))
ARIMA <- function(df,y,p,q,d)
{
}
View(future)
length(df$x)
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
length(df$x)
x <- auto.arima(df$x)
future <- forecast(x,h=3)
length(future$fitted)
ARIMA <- function(df,y,p,q,d)
{
}
View(future)
future$mean
future$upper
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
length(df$x)
x <- auto.arima(df$x)
future <- forecast(x,h=10)
length(future$fitted)
ARIMA <- function(df,y,p,q,d)
{
}
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
length(df$x)
x <- auto.arima(df$x)
future <- forecast(x,h=10)
length(future$fitted)
future$mean
ARIMA <- function(df,y,p,q,d)
{
}
library(forecast)
df <- read.csv("dalmp.csv",header = TRUE)
df = subset(df, select = c(OPERATION_DATE,PRICE))
df <- aggregate(df$PRICE,by=list(OPERATION_DATE = df$OPERATION_DATE),FUN = mean)
length(df$x)
x <- auto.arima(df$x)
future <- forecast(x,h=10)
length(future$fitted)
future$upper
ARIMA <- function(df,y,p,q,d)
{
}
View(future)
